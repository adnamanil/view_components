/* SegmentedControl */

.SegmentedControl {
  display: inline-flex;
  list-style: none;
  background-color: var(--color-segmented-control-bg);
  border-radius: var(--primer-borderRadius-medium, 6px);
  box-shadow: var(--primer-borderInset-thin, inset 0 0 0 max(1px, 0.0625rem)) var(--color-border-default);
}

.SegmentedControl-item {
  position: relative;
  display: inline-flex;
  border: var(--primer-borderWidth-thin, max(1px, 0.0625rem)) solid transparent;
  border-radius: var(--primer-borderRadius-medium, 6px);

  &:not(.SegmentedControl-item--selected):hover .SegmentedControl-content {
    background-color: var(--color-segmented-control-button-hover-bg);
  }

  &:not(.SegmentedControl-item--selected):active .SegmentedControl-content {
    background-color: var(--color-segmented-control-button-active-bg);
  }

  /* Selected */

  &.SegmentedControl-item--selected {
    background-color: var(--color-btn-bg);
    border-color: var(--color-segmented-control-button-selected-border);

    & .Button {
      font-weight: var(--base-text-weight-semibold, 600);
    }

    &::before {
      border-color: transparent;
    }

    & + .SegmentedControl-item::before {
      border-color: transparent;
    }
  }

  /* renders a visibly hidden "copy" of the text in bold, reserving box space for when text becomes bold on selected */
  & .Button-label[data-content]::before {
    display: block;
    height: 0;
    font-weight: var(--base-text-weight-semibold, 600);
    visibility: hidden;
    content: attr(data-content);
  }

  &::before {
    position: absolute;
    inset: var(--primer-borderWidth-thin, 1px) 0 0 calc(var(--primer-borderWidth-thin, 1px) * -1);
    height: var(--primer-text-body-size-large, 16px);
    margin-top: var(--primer-control-medium-paddingBlock, 6px);
    content: '';
    border-left: var(--primer-borderWidth-thin, max(1px, 0.0625rem)) solid var(--color-border-default);
  }

  /* Button ----------------------------------------- */
  & .Button {
    display: inline-flex;
    height: var(--primer-control-medium-size, 32px);
    padding: calc(var(--primer-control-xsmall-paddingInline-condensed, 4px) - var(--primer-borderWidth-thin, 1px));
    background-color: transparent;
    border: transparent;
    border-radius: var(--primer-borderRadius-medium, 6px);

    &:focus-visible {
      outline-offset: -1px;
    }
  }

  /* Content ----------------------------------------- */
  & .Button-content {
    display: flex;
    flex: 1;
    height: 100%;
    padding: 0 var(--primer-control-medium-paddingInline-condensed, 8px);
    border-radius: var(--primer-borderRadius-medium, 6px);
  }
}

/* Variants ----------------------------------------- */

/* fullWidth */
.SegmentedControl--fullWidth {
  display: flex;

  & .Button,
  & .SegmentedControl-item {
    flex: 1;
    justify-content: center;
  }
}

/* Icon only */
.SegmentedControl--iconOnly {
  width: var(--primer-control-medium-size, 32px);

  & .Button-content {
    padding: 0;
    flex: 1;
  }
}

/* Icon only when narrow */
@media (max-width: 768px) {
  .SegmentedControl--iconOnly-whenNarrow {
    width: var(--primer-control-medium-size, 32px);

    & .Button-content {
      padding: 0;
      flex: 1;
    }

    & .Button-label {
      display: none;
    }

    & .Button-leadingVisual {
      margin-right: 0;
    }
  }
}

/* Increase touch target */
@media (pointer: coarse) {
  .SegmentedControl-item .Button {
    min-width: var(--primer-control-minTarget-coarse, 44px);

    &::after {
      @mixin minTouchTarget var(--primer-control-minTarget-coarse, 44px);
    }
  }

  /* reset for icon-only buttons */
  .SegmentedControl--iconOnly,
  .SegmentedControl--iconOnly-whenNarrow {
    min-width: unset;
  }
}
